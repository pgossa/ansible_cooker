---
# tasks file for kvm_provision
- name: Ensure requirements in place
  package:
    name:
      - guestfs-tools
      - libvirt-python
      - python-lxml
    state: present
  become: true

- name: Get VMs list
  community.libvirt.virt:
    command: list_vms
  register: existing_vms
  changed_when: no

- name: Create VM if not exists
  block:
    - name: Check if image is already downloaded
      stat:
        path: "{{ libvirt_pool_dir }}/{{ vm_name }}.qcow2"
      register: image_exists

    - block:
        # - name: Download base image
        #   get_url:
        #     url: "{{ base_image_url }}"
        #     dest: "/tmp/{{ base_image_name }}"
        #     checksum: "sha256:{{ base_image_sha }}"

        - name: Copy base image to libvirt directory
          copy:
            dest: "{{ libvirt_pool_dir }}/{{ vm_name }}.qcow2"
            src: "/tmp/{{ base_image_name }}"
            owner: qemu
            group: qemu
            force: no
            remote_src: yes
            mode: u=rw,g=r,o=r
          register: copy_results

        - name: Configure the image
          command: |
            virt-customize -a {{ libvirt_pool_dir }}/{{ vm_name }}.qcow2 \
            --hostname {{ vm_name }} \
            --root-password password:{{ vm_root_pass }} \
            --ssh-inject 'root:file:{{ ssh_key }}' \
            --run-command 'sudo systemctl start sshd'
          when: copy_results is changed
      when: not image_exists.stat.exists

    - name: Define vm
      community.libvirt.virt:
        command: define
        xml: "{{ lookup('template', 'vm-template.xml.j2') }}"

  when: "vm_name not in existing_vms.list_vms"

- name: Ensure VM is started
  community.libvirt.virt:
    name: "{{ vm_name }}"
    state: running
  register: vm_start_results
  until: "vm_start_results is success"
  retries: 15
  delay: 2

- name: Ensure temporary file is deleted
  file:
    path: "/tmp/{{ base_image_name }}"
    state: absent
  when: cleanup_tmp | bool

- name: Get vm ip
  community.libvirt.virt_net:
    name: "{{ vm_net }}"
    command: info
  register: vm_ip

- name: Test
  debug:
    # msg: "{{ vm_ip.networks.default.dhcp_leases | selectattr('hostname', '==', vm_name ) | map(attribute='ipaddr') | first }}"
    msg: "{{ vm_ip.networks.default.dhcp_leases }}"

- name: Test2
  debug:
    # msg: "{{ vm_ip.networks.default.dhcp_leases | selectattr('hostname', '==', vm_name ) | map(attribute='ipaddr') | first }}"
    msg: "{{ vm_ip.networks.default.dhcp_leases | selectattr('hostname', '==', 'archlinux' )}}"

- name: Add host
  ansible.builtin.add_host:
    name: "{{ vm_ip.networks.default.dhcp_leases[0].ipaddr }}"
    groups: nodes
